/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface ConfigurableInterestVaultConfigInterface
  extends ethers.utils.Interface {
  functions: {
    "acceptDebt(address)": FunctionFragment;
    "approvedAddStrategies(address)": FunctionFragment;
    "getFairLaunchAddr()": FunctionFragment;
    "getInterestRate(uint256,uint256)": FunctionFragment;
    "getKillBps()": FunctionFragment;
    "getKillTreasuryBps()": FunctionFragment;
    "getReservePoolBps()": FunctionFragment;
    "getTreasuryAddr()": FunctionFragment;
    "getWNativeRelayer()": FunctionFragment;
    "getWrappedNativeAddr()": FunctionFragment;
    "initialize(uint256,uint256,uint256,address,address,address,address,uint256,address)": FunctionFragment;
    "interestModel()": FunctionFragment;
    "isWorker(address)": FunctionFragment;
    "isWorkerReserveConsistent(address)": FunctionFragment;
    "isWorkerStable(address)": FunctionFragment;
    "killFactor(address,uint256)": FunctionFragment;
    "maxKillBps()": FunctionFragment;
    "minDebtSize()": FunctionFragment;
    "owner()": FunctionFragment;
    "rawKillFactor(address,uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setApprovedAddStrategy(address[],bool)": FunctionFragment;
    "setMaxKillBps(uint256)": FunctionFragment;
    "setParams(uint256,uint256,uint256,address,address,address,address,uint256,address)": FunctionFragment;
    "setWhitelistedCallers(address[],bool)": FunctionFragment;
    "setWhitelistedLiquidators(address[],bool)": FunctionFragment;
    "setWorkers(address[],address[])": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "treasury()": FunctionFragment;
    "whitelistedCallers(address)": FunctionFragment;
    "whitelistedLiquidators(address)": FunctionFragment;
    "workFactor(address,uint256)": FunctionFragment;
    "workers(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "acceptDebt", values: [string]): string;
  encodeFunctionData(
    functionFragment: "approvedAddStrategies",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getFairLaunchAddr",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getInterestRate",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getKillBps",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getKillTreasuryBps",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getReservePoolBps",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTreasuryAddr",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getWNativeRelayer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getWrappedNativeAddr",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      string,
      string,
      string,
      BigNumberish,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "interestModel",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isWorker", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isWorkerReserveConsistent",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isWorkerStable",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "killFactor",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "maxKillBps",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minDebtSize",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "rawKillFactor",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovedAddStrategy",
    values: [string[], boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxKillBps",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setParams",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      string,
      string,
      string,
      BigNumberish,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setWhitelistedCallers",
    values: [string[], boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setWhitelistedLiquidators",
    values: [string[], boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setWorkers",
    values: [string[], string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "treasury", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "whitelistedCallers",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistedLiquidators",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "workFactor",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "workers", values: [string]): string;

  decodeFunctionResult(functionFragment: "acceptDebt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "approvedAddStrategies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFairLaunchAddr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInterestRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getKillBps", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getKillTreasuryBps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReservePoolBps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTreasuryAddr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWNativeRelayer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWrappedNativeAddr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "interestModel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isWorker", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isWorkerReserveConsistent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isWorkerStable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "killFactor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "maxKillBps", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "minDebtSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rawKillFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovedAddStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxKillBps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setParams", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setWhitelistedCallers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWhitelistedLiquidators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setWorkers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "whitelistedCallers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistedLiquidators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "workFactor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "workers", data: BytesLike): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "SetApprovedAddStrategy(address,address,bool)": EventFragment;
    "SetMaxKillBps(address,uint256)": EventFragment;
    "SetParams(address,uint256,uint256,uint256,address,address,address,address,uint256,address)": EventFragment;
    "SetWhitelistedCaller(address,address,bool)": EventFragment;
    "SetWhitelistedLiquidator(address,address,bool)": EventFragment;
    "SetWorkers(address,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetApprovedAddStrategy"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetMaxKillBps"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetParams"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetWhitelistedCaller"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetWhitelistedLiquidator"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetWorkers"): EventFragment;
}

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type SetApprovedAddStrategyEvent = TypedEvent<
  [string, string, boolean] & { caller: string; addStrat: string; ok: boolean }
>;

export type SetMaxKillBpsEvent = TypedEvent<
  [string, BigNumber] & { caller: string; maxKillBps: BigNumber }
>;

export type SetParamsEvent = TypedEvent<
  [
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    string,
    string,
    string,
    BigNumber,
    string
  ] & {
    caller: string;
    minDebtSize: BigNumber;
    reservePoolBps: BigNumber;
    killBps: BigNumber;
    interestModel: string;
    wrappedNative: string;
    wNativeRelayer: string;
    fairLaunch: string;
    killTreasuryBps: BigNumber;
    treasury: string;
  }
>;

export type SetWhitelistedCallerEvent = TypedEvent<
  [string, string, boolean] & { caller: string; addr: string; ok: boolean }
>;

export type SetWhitelistedLiquidatorEvent = TypedEvent<
  [string, string, boolean] & { caller: string; addr: string; ok: boolean }
>;

export type SetWorkersEvent = TypedEvent<
  [string, string, string] & {
    caller: string;
    worker: string;
    workerConfig: string;
  }
>;

export class ConfigurableInterestVaultConfig extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ConfigurableInterestVaultConfigInterface;

  functions: {
    acceptDebt(worker: string, overrides?: CallOverrides): Promise<[boolean]>;

    approvedAddStrategies(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getFairLaunchAddr(overrides?: CallOverrides): Promise<[string]>;

    getInterestRate(
      debt: BigNumberish,
      floating: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getKillBps(overrides?: CallOverrides): Promise<[BigNumber]>;

    getKillTreasuryBps(overrides?: CallOverrides): Promise<[BigNumber]>;

    getReservePoolBps(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTreasuryAddr(overrides?: CallOverrides): Promise<[string]>;

    getWNativeRelayer(overrides?: CallOverrides): Promise<[string]>;

    getWrappedNativeAddr(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      _minDebtSize: BigNumberish,
      _reservePoolBps: BigNumberish,
      _killBps: BigNumberish,
      _interestModel: string,
      _getWrappedNativeAddr: string,
      _getWNativeRelayer: string,
      _getFairLaunchAddr: string,
      _getKillTreasuryBps: BigNumberish,
      _treasury: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    interestModel(overrides?: CallOverrides): Promise<[string]>;

    isWorker(worker: string, overrides?: CallOverrides): Promise<[boolean]>;

    isWorkerReserveConsistent(
      worker: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isWorkerStable(
      worker: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    killFactor(
      worker: string,
      debt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    maxKillBps(overrides?: CallOverrides): Promise<[BigNumber]>;

    minDebtSize(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    rawKillFactor(
      worker: string,
      debt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setApprovedAddStrategy(
      addStrats: string[],
      ok: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxKillBps(
      _maxKillBps: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setParams(
      _minDebtSize: BigNumberish,
      _reservePoolBps: BigNumberish,
      _killBps: BigNumberish,
      _interestModel: string,
      _getWrappedNativeAddr: string,
      _getWNativeRelayer: string,
      _getFairLaunchAddr: string,
      _getKillTreasuryBps: BigNumberish,
      _treasury: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setWhitelistedCallers(
      callers: string[],
      ok: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setWhitelistedLiquidators(
      callers: string[],
      ok: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setWorkers(
      addrs: string[],
      configs: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    treasury(overrides?: CallOverrides): Promise<[string]>;

    whitelistedCallers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    whitelistedLiquidators(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    workFactor(
      worker: string,
      debt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    workers(arg0: string, overrides?: CallOverrides): Promise<[string]>;
  };

  acceptDebt(worker: string, overrides?: CallOverrides): Promise<boolean>;

  approvedAddStrategies(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getFairLaunchAddr(overrides?: CallOverrides): Promise<string>;

  getInterestRate(
    debt: BigNumberish,
    floating: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getKillBps(overrides?: CallOverrides): Promise<BigNumber>;

  getKillTreasuryBps(overrides?: CallOverrides): Promise<BigNumber>;

  getReservePoolBps(overrides?: CallOverrides): Promise<BigNumber>;

  getTreasuryAddr(overrides?: CallOverrides): Promise<string>;

  getWNativeRelayer(overrides?: CallOverrides): Promise<string>;

  getWrappedNativeAddr(overrides?: CallOverrides): Promise<string>;

  initialize(
    _minDebtSize: BigNumberish,
    _reservePoolBps: BigNumberish,
    _killBps: BigNumberish,
    _interestModel: string,
    _getWrappedNativeAddr: string,
    _getWNativeRelayer: string,
    _getFairLaunchAddr: string,
    _getKillTreasuryBps: BigNumberish,
    _treasury: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  interestModel(overrides?: CallOverrides): Promise<string>;

  isWorker(worker: string, overrides?: CallOverrides): Promise<boolean>;

  isWorkerReserveConsistent(
    worker: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isWorkerStable(worker: string, overrides?: CallOverrides): Promise<boolean>;

  killFactor(
    worker: string,
    debt: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  maxKillBps(overrides?: CallOverrides): Promise<BigNumber>;

  minDebtSize(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  rawKillFactor(
    worker: string,
    debt: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setApprovedAddStrategy(
    addStrats: string[],
    ok: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxKillBps(
    _maxKillBps: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setParams(
    _minDebtSize: BigNumberish,
    _reservePoolBps: BigNumberish,
    _killBps: BigNumberish,
    _interestModel: string,
    _getWrappedNativeAddr: string,
    _getWNativeRelayer: string,
    _getFairLaunchAddr: string,
    _getKillTreasuryBps: BigNumberish,
    _treasury: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setWhitelistedCallers(
    callers: string[],
    ok: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setWhitelistedLiquidators(
    callers: string[],
    ok: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setWorkers(
    addrs: string[],
    configs: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  treasury(overrides?: CallOverrides): Promise<string>;

  whitelistedCallers(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  whitelistedLiquidators(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  workFactor(
    worker: string,
    debt: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  workers(arg0: string, overrides?: CallOverrides): Promise<string>;

  callStatic: {
    acceptDebt(worker: string, overrides?: CallOverrides): Promise<boolean>;

    approvedAddStrategies(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getFairLaunchAddr(overrides?: CallOverrides): Promise<string>;

    getInterestRate(
      debt: BigNumberish,
      floating: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getKillBps(overrides?: CallOverrides): Promise<BigNumber>;

    getKillTreasuryBps(overrides?: CallOverrides): Promise<BigNumber>;

    getReservePoolBps(overrides?: CallOverrides): Promise<BigNumber>;

    getTreasuryAddr(overrides?: CallOverrides): Promise<string>;

    getWNativeRelayer(overrides?: CallOverrides): Promise<string>;

    getWrappedNativeAddr(overrides?: CallOverrides): Promise<string>;

    initialize(
      _minDebtSize: BigNumberish,
      _reservePoolBps: BigNumberish,
      _killBps: BigNumberish,
      _interestModel: string,
      _getWrappedNativeAddr: string,
      _getWNativeRelayer: string,
      _getFairLaunchAddr: string,
      _getKillTreasuryBps: BigNumberish,
      _treasury: string,
      overrides?: CallOverrides
    ): Promise<void>;

    interestModel(overrides?: CallOverrides): Promise<string>;

    isWorker(worker: string, overrides?: CallOverrides): Promise<boolean>;

    isWorkerReserveConsistent(
      worker: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isWorkerStable(worker: string, overrides?: CallOverrides): Promise<boolean>;

    killFactor(
      worker: string,
      debt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxKillBps(overrides?: CallOverrides): Promise<BigNumber>;

    minDebtSize(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    rawKillFactor(
      worker: string,
      debt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setApprovedAddStrategy(
      addStrats: string[],
      ok: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxKillBps(
      _maxKillBps: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setParams(
      _minDebtSize: BigNumberish,
      _reservePoolBps: BigNumberish,
      _killBps: BigNumberish,
      _interestModel: string,
      _getWrappedNativeAddr: string,
      _getWNativeRelayer: string,
      _getFairLaunchAddr: string,
      _getKillTreasuryBps: BigNumberish,
      _treasury: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setWhitelistedCallers(
      callers: string[],
      ok: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setWhitelistedLiquidators(
      callers: string[],
      ok: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setWorkers(
      addrs: string[],
      configs: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    treasury(overrides?: CallOverrides): Promise<string>;

    whitelistedCallers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    whitelistedLiquidators(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    workFactor(
      worker: string,
      debt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    workers(arg0: string, overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "SetApprovedAddStrategy(address,address,bool)"(
      caller?: string | null,
      addStrat?: null,
      ok?: null
    ): TypedEventFilter<
      [string, string, boolean],
      { caller: string; addStrat: string; ok: boolean }
    >;

    SetApprovedAddStrategy(
      caller?: string | null,
      addStrat?: null,
      ok?: null
    ): TypedEventFilter<
      [string, string, boolean],
      { caller: string; addStrat: string; ok: boolean }
    >;

    "SetMaxKillBps(address,uint256)"(
      caller?: string | null,
      maxKillBps?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { caller: string; maxKillBps: BigNumber }
    >;

    SetMaxKillBps(
      caller?: string | null,
      maxKillBps?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { caller: string; maxKillBps: BigNumber }
    >;

    "SetParams(address,uint256,uint256,uint256,address,address,address,address,uint256,address)"(
      caller?: string | null,
      minDebtSize?: null,
      reservePoolBps?: null,
      killBps?: null,
      interestModel?: null,
      wrappedNative?: null,
      wNativeRelayer?: null,
      fairLaunch?: null,
      killTreasuryBps?: null,
      treasury?: null
    ): TypedEventFilter<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string,
        string,
        string,
        BigNumber,
        string
      ],
      {
        caller: string;
        minDebtSize: BigNumber;
        reservePoolBps: BigNumber;
        killBps: BigNumber;
        interestModel: string;
        wrappedNative: string;
        wNativeRelayer: string;
        fairLaunch: string;
        killTreasuryBps: BigNumber;
        treasury: string;
      }
    >;

    SetParams(
      caller?: string | null,
      minDebtSize?: null,
      reservePoolBps?: null,
      killBps?: null,
      interestModel?: null,
      wrappedNative?: null,
      wNativeRelayer?: null,
      fairLaunch?: null,
      killTreasuryBps?: null,
      treasury?: null
    ): TypedEventFilter<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string,
        string,
        string,
        BigNumber,
        string
      ],
      {
        caller: string;
        minDebtSize: BigNumber;
        reservePoolBps: BigNumber;
        killBps: BigNumber;
        interestModel: string;
        wrappedNative: string;
        wNativeRelayer: string;
        fairLaunch: string;
        killTreasuryBps: BigNumber;
        treasury: string;
      }
    >;

    "SetWhitelistedCaller(address,address,bool)"(
      caller?: string | null,
      addr?: string | null,
      ok?: null
    ): TypedEventFilter<
      [string, string, boolean],
      { caller: string; addr: string; ok: boolean }
    >;

    SetWhitelistedCaller(
      caller?: string | null,
      addr?: string | null,
      ok?: null
    ): TypedEventFilter<
      [string, string, boolean],
      { caller: string; addr: string; ok: boolean }
    >;

    "SetWhitelistedLiquidator(address,address,bool)"(
      caller?: string | null,
      addr?: string | null,
      ok?: null
    ): TypedEventFilter<
      [string, string, boolean],
      { caller: string; addr: string; ok: boolean }
    >;

    SetWhitelistedLiquidator(
      caller?: string | null,
      addr?: string | null,
      ok?: null
    ): TypedEventFilter<
      [string, string, boolean],
      { caller: string; addr: string; ok: boolean }
    >;

    "SetWorkers(address,address,address)"(
      caller?: string | null,
      worker?: null,
      workerConfig?: null
    ): TypedEventFilter<
      [string, string, string],
      { caller: string; worker: string; workerConfig: string }
    >;

    SetWorkers(
      caller?: string | null,
      worker?: null,
      workerConfig?: null
    ): TypedEventFilter<
      [string, string, string],
      { caller: string; worker: string; workerConfig: string }
    >;
  };

  estimateGas: {
    acceptDebt(worker: string, overrides?: CallOverrides): Promise<BigNumber>;

    approvedAddStrategies(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFairLaunchAddr(overrides?: CallOverrides): Promise<BigNumber>;

    getInterestRate(
      debt: BigNumberish,
      floating: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getKillBps(overrides?: CallOverrides): Promise<BigNumber>;

    getKillTreasuryBps(overrides?: CallOverrides): Promise<BigNumber>;

    getReservePoolBps(overrides?: CallOverrides): Promise<BigNumber>;

    getTreasuryAddr(overrides?: CallOverrides): Promise<BigNumber>;

    getWNativeRelayer(overrides?: CallOverrides): Promise<BigNumber>;

    getWrappedNativeAddr(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _minDebtSize: BigNumberish,
      _reservePoolBps: BigNumberish,
      _killBps: BigNumberish,
      _interestModel: string,
      _getWrappedNativeAddr: string,
      _getWNativeRelayer: string,
      _getFairLaunchAddr: string,
      _getKillTreasuryBps: BigNumberish,
      _treasury: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    interestModel(overrides?: CallOverrides): Promise<BigNumber>;

    isWorker(worker: string, overrides?: CallOverrides): Promise<BigNumber>;

    isWorkerReserveConsistent(
      worker: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isWorkerStable(
      worker: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    killFactor(
      worker: string,
      debt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxKillBps(overrides?: CallOverrides): Promise<BigNumber>;

    minDebtSize(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    rawKillFactor(
      worker: string,
      debt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setApprovedAddStrategy(
      addStrats: string[],
      ok: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxKillBps(
      _maxKillBps: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setParams(
      _minDebtSize: BigNumberish,
      _reservePoolBps: BigNumberish,
      _killBps: BigNumberish,
      _interestModel: string,
      _getWrappedNativeAddr: string,
      _getWNativeRelayer: string,
      _getFairLaunchAddr: string,
      _getKillTreasuryBps: BigNumberish,
      _treasury: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setWhitelistedCallers(
      callers: string[],
      ok: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setWhitelistedLiquidators(
      callers: string[],
      ok: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setWorkers(
      addrs: string[],
      configs: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    treasury(overrides?: CallOverrides): Promise<BigNumber>;

    whitelistedCallers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    whitelistedLiquidators(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    workFactor(
      worker: string,
      debt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    workers(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptDebt(
      worker: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approvedAddStrategies(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFairLaunchAddr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getInterestRate(
      debt: BigNumberish,
      floating: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getKillBps(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getKillTreasuryBps(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReservePoolBps(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTreasuryAddr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getWNativeRelayer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getWrappedNativeAddr(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _minDebtSize: BigNumberish,
      _reservePoolBps: BigNumberish,
      _killBps: BigNumberish,
      _interestModel: string,
      _getWrappedNativeAddr: string,
      _getWNativeRelayer: string,
      _getFairLaunchAddr: string,
      _getKillTreasuryBps: BigNumberish,
      _treasury: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    interestModel(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isWorker(
      worker: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isWorkerReserveConsistent(
      worker: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isWorkerStable(
      worker: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    killFactor(
      worker: string,
      debt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxKillBps(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minDebtSize(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rawKillFactor(
      worker: string,
      debt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setApprovedAddStrategy(
      addStrats: string[],
      ok: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxKillBps(
      _maxKillBps: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setParams(
      _minDebtSize: BigNumberish,
      _reservePoolBps: BigNumberish,
      _killBps: BigNumberish,
      _interestModel: string,
      _getWrappedNativeAddr: string,
      _getWNativeRelayer: string,
      _getFairLaunchAddr: string,
      _getKillTreasuryBps: BigNumberish,
      _treasury: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setWhitelistedCallers(
      callers: string[],
      ok: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setWhitelistedLiquidators(
      callers: string[],
      ok: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setWorkers(
      addrs: string[],
      configs: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    treasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    whitelistedCallers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    whitelistedLiquidators(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    workFactor(
      worker: string,
      debt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    workers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
