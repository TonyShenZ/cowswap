/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface PancakeswapV2WorkerInterface extends ethers.utils.Interface {
  functions: {
    "addStrat()": FunctionFragment;
    "balanceToShare(uint256)": FunctionFragment;
    "baseToken()": FunctionFragment;
    "cake()": FunctionFragment;
    "factory()": FunctionFragment;
    "farmingToken()": FunctionFragment;
    "fee()": FunctionFragment;
    "feeDenom()": FunctionFragment;
    "getMktSellAmount(uint256,uint256,uint256)": FunctionFragment;
    "health(uint256)": FunctionFragment;
    "initialize(address,address,address,address,uint256,address,address,uint256)": FunctionFragment;
    "liqStrat()": FunctionFragment;
    "liquidate(uint256)": FunctionFragment;
    "lpToken()": FunctionFragment;
    "masterChef()": FunctionFragment;
    "maxReinvestBountyBps()": FunctionFragment;
    "okReinvestors(address)": FunctionFragment;
    "okStrats(address)": FunctionFragment;
    "operator()": FunctionFragment;
    "owner()": FunctionFragment;
    "pid()": FunctionFragment;
    "reinvest()": FunctionFragment;
    "reinvestBountyBps()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "router()": FunctionFragment;
    "setCriticalStrategies(address,address)": FunctionFragment;
    "setMaxReinvestBountyBps(uint256)": FunctionFragment;
    "setReinvestBountyBps(uint256)": FunctionFragment;
    "setReinvestorOk(address[],bool)": FunctionFragment;
    "setStrategyOk(address[],bool)": FunctionFragment;
    "shareToBalance(uint256)": FunctionFragment;
    "shares(uint256)": FunctionFragment;
    "totalShare()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "wNative()": FunctionFragment;
    "work(uint256,address,uint256,bytes)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "addStrat", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "balanceToShare",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "baseToken", values?: undefined): string;
  encodeFunctionData(functionFragment: "cake", values?: undefined): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "farmingToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "fee", values?: undefined): string;
  encodeFunctionData(functionFragment: "feeDenom", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getMktSellAmount",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "health",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      string,
      string,
      string,
      string,
      BigNumberish,
      string,
      string,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(functionFragment: "liqStrat", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "liquidate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "lpToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "masterChef",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxReinvestBountyBps",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "okReinvestors",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "okStrats", values: [string]): string;
  encodeFunctionData(functionFragment: "operator", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pid", values?: undefined): string;
  encodeFunctionData(functionFragment: "reinvest", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "reinvestBountyBps",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "router", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setCriticalStrategies",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxReinvestBountyBps",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setReinvestBountyBps",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setReinvestorOk",
    values: [string[], boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setStrategyOk",
    values: [string[], boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "shareToBalance",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "shares",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalShare",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "wNative", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "work",
    values: [BigNumberish, string, BigNumberish, BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "addStrat", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceToShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "baseToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "farmingToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "feeDenom", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMktSellAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "health", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "liqStrat", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "liquidate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lpToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "masterChef", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxReinvestBountyBps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "okReinvestors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "okStrats", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "operator", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pid", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "reinvest", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "reinvestBountyBps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "router", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setCriticalStrategies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxReinvestBountyBps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReinvestBountyBps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReinvestorOk",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStrategyOk",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "shareToBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "shares", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "totalShare", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "wNative", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "work", data: BytesLike): Result;

  events: {
    "AddShare(uint256,uint256)": EventFragment;
    "Liquidate(uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Reinvest(address,uint256,uint256)": EventFragment;
    "RemoveShare(uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddShare"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Liquidate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Reinvest"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveShare"): EventFragment;
}

export type AddShareEvent = TypedEvent<
  [BigNumber, BigNumber] & { id: BigNumber; share: BigNumber }
>;

export type LiquidateEvent = TypedEvent<
  [BigNumber, BigNumber] & { id: BigNumber; wad: BigNumber }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type ReinvestEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    caller: string;
    reward: BigNumber;
    bounty: BigNumber;
  }
>;

export type RemoveShareEvent = TypedEvent<
  [BigNumber, BigNumber] & { id: BigNumber; share: BigNumber }
>;

export class PancakeswapV2Worker extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: PancakeswapV2WorkerInterface;

  functions: {
    addStrat(overrides?: CallOverrides): Promise<[string]>;

    balanceToShare(
      balance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    baseToken(overrides?: CallOverrides): Promise<[string]>;

    cake(overrides?: CallOverrides): Promise<[string]>;

    factory(overrides?: CallOverrides): Promise<[string]>;

    farmingToken(overrides?: CallOverrides): Promise<[string]>;

    fee(overrides?: CallOverrides): Promise<[BigNumber]>;

    feeDenom(overrides?: CallOverrides): Promise<[BigNumber]>;

    getMktSellAmount(
      aIn: BigNumberish,
      rIn: BigNumberish,
      rOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    health(id: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    initialize(
      _operator: string,
      _baseToken: string,
      _masterChef: string,
      _router: string,
      _pid: BigNumberish,
      _addStrat: string,
      _liqStrat: string,
      _reinvestBountyBps: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    liqStrat(overrides?: CallOverrides): Promise<[string]>;

    liquidate(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lpToken(overrides?: CallOverrides): Promise<[string]>;

    masterChef(overrides?: CallOverrides): Promise<[string]>;

    maxReinvestBountyBps(overrides?: CallOverrides): Promise<[BigNumber]>;

    okReinvestors(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    okStrats(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    operator(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pid(overrides?: CallOverrides): Promise<[BigNumber]>;

    reinvest(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    reinvestBountyBps(overrides?: CallOverrides): Promise<[BigNumber]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    router(overrides?: CallOverrides): Promise<[string]>;

    setCriticalStrategies(
      _addStrat: string,
      _liqStrat: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxReinvestBountyBps(
      _maxReinvestBountyBps: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setReinvestBountyBps(
      _reinvestBountyBps: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setReinvestorOk(
      reinvestors: string[],
      isOk: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setStrategyOk(
      strats: string[],
      isOk: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    shareToBalance(
      share: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    shares(arg0: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    totalShare(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    wNative(overrides?: CallOverrides): Promise<[string]>;

    work(
      id: BigNumberish,
      user: string,
      debt: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addStrat(overrides?: CallOverrides): Promise<string>;

  balanceToShare(
    balance: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  baseToken(overrides?: CallOverrides): Promise<string>;

  cake(overrides?: CallOverrides): Promise<string>;

  factory(overrides?: CallOverrides): Promise<string>;

  farmingToken(overrides?: CallOverrides): Promise<string>;

  fee(overrides?: CallOverrides): Promise<BigNumber>;

  feeDenom(overrides?: CallOverrides): Promise<BigNumber>;

  getMktSellAmount(
    aIn: BigNumberish,
    rIn: BigNumberish,
    rOut: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  health(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    _operator: string,
    _baseToken: string,
    _masterChef: string,
    _router: string,
    _pid: BigNumberish,
    _addStrat: string,
    _liqStrat: string,
    _reinvestBountyBps: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  liqStrat(overrides?: CallOverrides): Promise<string>;

  liquidate(
    id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lpToken(overrides?: CallOverrides): Promise<string>;

  masterChef(overrides?: CallOverrides): Promise<string>;

  maxReinvestBountyBps(overrides?: CallOverrides): Promise<BigNumber>;

  okReinvestors(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  okStrats(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  operator(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  pid(overrides?: CallOverrides): Promise<BigNumber>;

  reinvest(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  reinvestBountyBps(overrides?: CallOverrides): Promise<BigNumber>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  router(overrides?: CallOverrides): Promise<string>;

  setCriticalStrategies(
    _addStrat: string,
    _liqStrat: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxReinvestBountyBps(
    _maxReinvestBountyBps: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setReinvestBountyBps(
    _reinvestBountyBps: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setReinvestorOk(
    reinvestors: string[],
    isOk: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setStrategyOk(
    strats: string[],
    isOk: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  shareToBalance(
    share: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  shares(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  totalShare(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  wNative(overrides?: CallOverrides): Promise<string>;

  work(
    id: BigNumberish,
    user: string,
    debt: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addStrat(overrides?: CallOverrides): Promise<string>;

    balanceToShare(
      balance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    baseToken(overrides?: CallOverrides): Promise<string>;

    cake(overrides?: CallOverrides): Promise<string>;

    factory(overrides?: CallOverrides): Promise<string>;

    farmingToken(overrides?: CallOverrides): Promise<string>;

    fee(overrides?: CallOverrides): Promise<BigNumber>;

    feeDenom(overrides?: CallOverrides): Promise<BigNumber>;

    getMktSellAmount(
      aIn: BigNumberish,
      rIn: BigNumberish,
      rOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    health(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _operator: string,
      _baseToken: string,
      _masterChef: string,
      _router: string,
      _pid: BigNumberish,
      _addStrat: string,
      _liqStrat: string,
      _reinvestBountyBps: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    liqStrat(overrides?: CallOverrides): Promise<string>;

    liquidate(id: BigNumberish, overrides?: CallOverrides): Promise<void>;

    lpToken(overrides?: CallOverrides): Promise<string>;

    masterChef(overrides?: CallOverrides): Promise<string>;

    maxReinvestBountyBps(overrides?: CallOverrides): Promise<BigNumber>;

    okReinvestors(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    okStrats(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    operator(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    pid(overrides?: CallOverrides): Promise<BigNumber>;

    reinvest(overrides?: CallOverrides): Promise<void>;

    reinvestBountyBps(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    router(overrides?: CallOverrides): Promise<string>;

    setCriticalStrategies(
      _addStrat: string,
      _liqStrat: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxReinvestBountyBps(
      _maxReinvestBountyBps: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setReinvestBountyBps(
      _reinvestBountyBps: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setReinvestorOk(
      reinvestors: string[],
      isOk: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setStrategyOk(
      strats: string[],
      isOk: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    shareToBalance(
      share: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    shares(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    totalShare(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    wNative(overrides?: CallOverrides): Promise<string>;

    work(
      id: BigNumberish,
      user: string,
      debt: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AddShare(uint256,uint256)"(
      id?: BigNumberish | null,
      share?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { id: BigNumber; share: BigNumber }
    >;

    AddShare(
      id?: BigNumberish | null,
      share?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { id: BigNumber; share: BigNumber }
    >;

    "Liquidate(uint256,uint256)"(
      id?: BigNumberish | null,
      wad?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { id: BigNumber; wad: BigNumber }
    >;

    Liquidate(
      id?: BigNumberish | null,
      wad?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { id: BigNumber; wad: BigNumber }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "Reinvest(address,uint256,uint256)"(
      caller?: string | null,
      reward?: null,
      bounty?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { caller: string; reward: BigNumber; bounty: BigNumber }
    >;

    Reinvest(
      caller?: string | null,
      reward?: null,
      bounty?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { caller: string; reward: BigNumber; bounty: BigNumber }
    >;

    "RemoveShare(uint256,uint256)"(
      id?: BigNumberish | null,
      share?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { id: BigNumber; share: BigNumber }
    >;

    RemoveShare(
      id?: BigNumberish | null,
      share?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { id: BigNumber; share: BigNumber }
    >;
  };

  estimateGas: {
    addStrat(overrides?: CallOverrides): Promise<BigNumber>;

    balanceToShare(
      balance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    baseToken(overrides?: CallOverrides): Promise<BigNumber>;

    cake(overrides?: CallOverrides): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<BigNumber>;

    farmingToken(overrides?: CallOverrides): Promise<BigNumber>;

    fee(overrides?: CallOverrides): Promise<BigNumber>;

    feeDenom(overrides?: CallOverrides): Promise<BigNumber>;

    getMktSellAmount(
      aIn: BigNumberish,
      rIn: BigNumberish,
      rOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    health(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _operator: string,
      _baseToken: string,
      _masterChef: string,
      _router: string,
      _pid: BigNumberish,
      _addStrat: string,
      _liqStrat: string,
      _reinvestBountyBps: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    liqStrat(overrides?: CallOverrides): Promise<BigNumber>;

    liquidate(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lpToken(overrides?: CallOverrides): Promise<BigNumber>;

    masterChef(overrides?: CallOverrides): Promise<BigNumber>;

    maxReinvestBountyBps(overrides?: CallOverrides): Promise<BigNumber>;

    okReinvestors(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    okStrats(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    operator(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pid(overrides?: CallOverrides): Promise<BigNumber>;

    reinvest(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    reinvestBountyBps(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    router(overrides?: CallOverrides): Promise<BigNumber>;

    setCriticalStrategies(
      _addStrat: string,
      _liqStrat: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxReinvestBountyBps(
      _maxReinvestBountyBps: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setReinvestBountyBps(
      _reinvestBountyBps: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setReinvestorOk(
      reinvestors: string[],
      isOk: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setStrategyOk(
      strats: string[],
      isOk: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    shareToBalance(
      share: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    shares(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    totalShare(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    wNative(overrides?: CallOverrides): Promise<BigNumber>;

    work(
      id: BigNumberish,
      user: string,
      debt: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addStrat(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceToShare(
      balance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    baseToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cake(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    farmingToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeDenom(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMktSellAmount(
      aIn: BigNumberish,
      rIn: BigNumberish,
      rOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    health(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _operator: string,
      _baseToken: string,
      _masterChef: string,
      _router: string,
      _pid: BigNumberish,
      _addStrat: string,
      _liqStrat: string,
      _reinvestBountyBps: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    liqStrat(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liquidate(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lpToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    masterChef(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxReinvestBountyBps(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    okReinvestors(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    okStrats(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    operator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pid(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reinvest(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    reinvestBountyBps(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    router(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setCriticalStrategies(
      _addStrat: string,
      _liqStrat: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxReinvestBountyBps(
      _maxReinvestBountyBps: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setReinvestBountyBps(
      _reinvestBountyBps: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setReinvestorOk(
      reinvestors: string[],
      isOk: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setStrategyOk(
      strats: string[],
      isOk: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    shareToBalance(
      share: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    shares(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalShare(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    wNative(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    work(
      id: BigNumberish,
      user: string,
      debt: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
